spring:
  kafka:
    consumer:
      value-deserializer: "org.springframework.kafka.support.serializer.JsonDeserializer"
      properties:
        "[spring.json.value.default.type]": "edu.miu.paypalservice.entity.Paypal"
        "[spring.json.trusted.packages]": "edu.miu.paypalservice"
    producer:
      value-serializer: "org.springframework.kafka.support.serializer.JsonSerializer"
      properties:
        "[spring.json.add.type.headers]": false
---
spring:
  config:
    activate:
      on-profile: dev
  kafka:
    bootstrap-servers: "localhost:9092"

  main:
    allow-bean-definition-overriding: true

  data:
    cassandra:
      contact-points: "localhost"
      keyspace-name: paypal
      port: 9042
      schema-action: create_if_not_exists
      local-datacenter: datacenter1

kafka:
  topic:
    paypal: "PaypalRequestEvent"
    notification: "GetNotificationEvent"
server:
  port: 8081
---
spring:
  config:
    activate:
      on-profile: prod
  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVER}

  main:
    allow-bean-definition-overriding: ${SPRING_ALLOW_BEAN_DEFINITION_OVERRIDING}
  data:
    cassandra:
      contact-points: ${DB_CONTACT_POINTS}
      port: ${DB_PORT}
      keyspace-name: ${DB_PAYPAL_KEYSPACE}
      schema-action: ${DB_SCHEME_ACTION}
      local-datacenter: ${DB_DATACENTER}
  zipkin:
    baseUrl: ${ZIPKIN_SERVER}
    service:
      name: ${ZIPKIN_PAYPAL_SERVICE}
kafka:
  topic:
    paypal: ${PAYMENT_PAYPAL_TOPIC}
    notification: ${NOTIFICATION_REQUEST_TOPIC}

